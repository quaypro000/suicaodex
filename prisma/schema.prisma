datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  library       Library?        @relation("UserLibrary")

  notifications Notify[]     @relation("toUser")

  // Optional for WebAuthn support
  //Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




model Library {
  id      String  @id @default(cuid())
  userId  String  @unique
  user    User    @relation("UserLibrary", fields: [userId], references: [id], onDelete: Cascade)
  mangas  LibraryManga[] // Liên kết n-n với bảng Manga qua bảng trung gian

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Manga {
  mangadexId       String       @id // Dùng mangadexId làm ID chính
  latestChapterId  String

  libraries        LibraryManga[] // Liên kết n-n qua bảng trung gian

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mangadexId])
}

model LibraryManga {
  id        String   @id @default(cuid()) // ID duy nhất cho bảng trung gian
  libraryId String 
  mangaId   String 
  category  Category // Loại manga trong thư viện

  library   Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  manga     Manga    @relation(fields: [mangaId], references: [mangadexId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([libraryId(length: 100), mangaId(length: 100)])
  @@index([libraryId(length: 100), category])
}
model Notify {
  id        Int        @id @default(autoincrement())
  toUserId  String
  content   String
  isRead    Boolean    @default(false)
  createdAt DateTime   @default(now())

  toUser User @relation("toUser", fields: [toUserId], references: [id])

  @@index([toUserId])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Category {
  FOLLOWING
  READING
  PLAN
  COMPLETED
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}


 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
} 
 
// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@id([userId, credentialID])
// }
